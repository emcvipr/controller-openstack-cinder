#!/bin/bash

# script that:
#   - creates one instance
#   - creates one volume  (of a predefined OpenStack volume type)
#   - attaches the volume to the instance

DATE=`date "+%m%d%Y%H%M"`
MNT="/dev/vdc"
VOLUMETYPE="ViPR High Performance"
VOLNAME="openstack-iscsi-${DATE}"
CLONENAME="clone-iscsi-${DATE}"
SNAPNAME="snapshot-iscsi-${DATE}"

INSTNAME="instance-${DATE}"
#get the nova image id
IMAGE=$( nova image-list | grep "cirros-0.3.1-x86_64-uec " | tr -s ' '| cut -f2 -d' ')

# Create the volume
cinder create --display-name "${VOLNAME}"  --volume-type "${VOLUMETYPE}" 1
cinder list

echo "Waiting for volume '${VOLNAME}' to be created"
STATUS="unknown"
while [ "${STATUS}" != "available" ]; do
   sleep 5
   STATUS=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f4 -d' ')
done

echo "*** volume is now available"

#get the volume id
VOLUME=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f2 -d' ')


# create a snapshot
echo "Creating a snapshot"
cinder snapshot-create --display-name "${SNAPNAME}" "${VOLUME}"
echo "Waiting for snapshot '${SNAPNAME}' to be created"
STATUS="unknown"
while [ "${STATUS}" != "available" ]; do
   sleep 5
   STATUS=$( cinder snapshot-list | grep "${SNAPNAME}" | tr -s ' ' | cut -f6 -d' ')
done
#get the snapshot id
SNAPSHOT=$( cinder snapshot-list | grep "${SNAPNAME}" | tr -s ' ' | cut -f2 -d' ')


# create a clone
echo "Creating a clone"
cinder create --source-volid "${VOLUME}" --display-name "${CLONENAME}" 1
echo "Waiting for clone '${CLONENAME}' to be created"
STATUS="unknown"
while [ "${STATUS}" != "available" ]; do
   sleep 5
   STATUS=$( cinder list | grep "${CLONENAME}" | tr -s ' ' | cut -f4 -d' ')
done
#get the clone id
CLONE=$( cinder list | grep "${CLONENAME}" | tr -s ' ' | cut -f2 -d' ')




read -p "do you want to create an instance and attach a the volume to it? [N/y] " ATTACH
if [ "${ATTACH}" == "y" -o "${ATTACH}" == "Y" ]; then

   echo "Creating an instance: ${INSTNAME}"
   nova boot --flavor m1.tiny --image ${IMAGE} ${INSTNAME}
   nova list

   echo "Waiting for instance '${INSTNAME}'to be created"
   STATUS="unknown"
   while [ "${STATUS}" != "ACTIVE" ]; do
      sleep 5
      STATUS=$( nova list | grep "${INSTNAME}" | tr -s ' ' | cut -f6 -d' ')
   done

   echo "*** instance is now available"

   #get the instance id
   INSTANCE=$( nova list | grep "${INSTNAME}" | tr -s ' '  | cut -f2 -d' ')

   # ok, now attach the volume
   nova volume-attach ${INSTANCE} ${VOLUME} ${MNT}

   # we'll know a volume is attached if we run 'cinder list'
   # and one line contains the VOLUMEID and the word "in-use"
   echo "Waiting for volume to be attached"
   STATUS="unknown"
   while [ "${STATUS}" != "in-use" ]; do
      sleep 5
      STATUS=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f4 -d' ')
   done
fi


read -p "Press [Enter] to continue and delete both the volume and instance"

if [ "${ATTACH}" == "y" -o "${ATTACH}" == "Y" ]; then
   # detach the volume
   echo "*** detaching the volume"
   nova volume-detach ${INSTANCE} ${VOLUME}
   # and wait for it to become available
   echo "Waiting for volume '${VOLNAME}' to be detached"
   STATUS="unknown"
   while [ "${STATUS}" != "available" ]; do
      sleep 5
      STATUS=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f4 -d' ')
   done
   
   # and the instance
   echo "*** deleting the instance"
   nova delete $INSTANCE
fi

# now delete the snapshot
echo "*** deleting the snapshot"
cinder snapshot-delete "${SNAPSHOT}"
echo "Waiting for snapshot to be deleted"
STATUS="unknown"
while [ "${STATUS}" != "0" ]; do
   sleep 5
   STATUS=$( cinder snapshot-list | grep "${SNAPSHOT}" | wc -l )
done

# now delete the clone
echo "***deleting the clone"
cinder delete "${CLONE}"
echo "Waiting for clone to be deleted"
STATUS="unknown"
while [ "${STATUS}" != "0" ]; do
   sleep 5
   STATUS=$( cinder list | grep "${CLONE}" | wc -l )
done

# now delete the volume
echo "*** deleting the volume"
cinder delete $VOLUME
echo "Waiting for volume to be deleted"
STATUS="unknown"
while [ "${STATUS}" != "0" ]; do
   sleep 5
   STATUS=$( cinder list | grep "${VOLUME}" | wc -l )
done






