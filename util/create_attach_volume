#!/bin/bash

# script that:
#   - creates one volume (of a predefined OpenStack volume type)
#   - optionally creates an instance and attach the volume to it
#   - optionally creates a snapshot of the volume and clones the volume
#   - optionally copies an image to a volume and then copies it back as a new image
#   - cleans up everything

DATE=`date "+%m%d%Y%H%M"`
#MNT="/dev/vdc"
MNT="auto"
VOLUMEIDTYPE="ViPR High Performance"
NAMESUFFIX="openstack-${HOSTNAME}-${DATE}"
VOLNAME="volume-${NAMESUFFIX}"
CLONENAME="clone-${NAMESUFFIX}"
SNAPNAME="snapshot-${NAMESUFFIX}"
IMAGENAME="cirros-0.3.1-x86_64-uec"
IMAGEVOLNAME="image-volume-${NAMESUFFIX}"
NEWIMAGENAME="new-image-${NAMESUFFIX}"

INSTNAME="instance-${DATE}"
#get the nova image id
IMAGE=$( nova image-list | grep "cirros-0.3.1-x86_64-uec " | tr -s ' '| cut -f2 -d' ')

function cinder_create-volume {
	# Create the volume
	echo "Creating volume: ${1}"
	cinder create --display-name "${1}"  --volume-type "${2}" 1
	if [ "$?" -ne 0 ]; then
	   echo "Error creating volume: ${1}"
	   exit 1
	fi
		
	cinder list
	
	echo "Waiting for volume '${1}' to be created"
	STATUS="unknown"
	while [ "${STATUS}" != "available" -a "${STATUS}" != "error" ]; do
	   sleep 5
	   STATUS=$( cinder list | grep "${1}" | tr -s ' ' | cut -f4 -d' ')
	   echo -en "\rCurrent status: ${STATUS}"
	done
	
	echo
	
	if [ "${STATUS}" == "error" ]; then
	   echo "Error creating volume: ${VOLNAME}"
	   exit 1
	fi
	
	echo "*** volume is now available"
	
	#get the volume id
	VOLUME=$( cinder list | grep "${1}" | tr -s ' ' | cut -f2 -d' ')
}

function cinder_delete-volume {
	# Create the volume
	cinder delete "${1}"
	if [ "$?" -ne 0 ]; then
	   echo "Error deleting volume: ${1}"
	   exit 1
	fi
	
	echo "Waiting for volume '${1}' to be deleting"
	STATUS="unknown"
	while [ "${STATUS}" != "" -a "${STATUS}" != "error_deleting" ]; do
	   sleep 5
	   LINE=$( cinder list | grep "${1}" )
	   WC=$( echo "${LINE}" | wc -l )
	   if [ "${WC}" == "0" ]; then
	      STATUS="deleted"
	   else
	      STATUS=$( echo "${LINE}" | tr -s ' ' | cut -f4 -d' ' )
	   fi
	   echo -en "\rCurrent status: ${STATUS}"
	done
	
	echo
	
	if [ "${STATUS}" == "error_deleting" ]; then
	   echo "Error deleting volume: ${1}"
	   exit 1
	fi
	
}


function cinder_create-snapshot {
	# Create a snapshot
	cinder snapshot-create --display-name "${1}" "${2}" 
	if [ "$?" -ne 0 ]; then
	   echo "Error creating snapshot: ${1}"
	   exit 1
	fi
		
	
	echo "Waiting for snapshot '${1}' to be created"
	STATUS="unknown"
	while [ "${STATUS}" != "available" -a "${STATUS}" != "error" ]; do
	   sleep 5
	   STATUS=$( cinder snapshot-list | grep "${1}" | tr -s ' ' | cut -f6 -d' ')
	   echo -en "\rCurrent status: ${STATUS}"
	done
	
	echo
	
	if [ "${STATUS}" == "error" ]; then
	   echo "Error creating snapshot: ${1}"
	   exit 1
	fi
	
	echo "*** snapshot is now available"
	
	#get the volume id
	SNAPSHOT=$( cinder snapshot-list | grep "${1}" | tr -s ' ' | cut -f2 -d' ')
}

function cinder_create-clone {
	# Create the volume
	cinder create --display-name "${1}"  --source-volid "${2}"  1
	if [ "$?" -ne 0 ]; then
	   echo "Error creating volume: ${1}"
	   exit 1
	fi
		
	echo "Waiting for clone '${1}' to be created"
	STATUS="unknown"
	while [ "${STATUS}" != "available" -a "${STATUS}" != "error" ]; do
	   sleep 5
	   STATUS=$( cinder list | grep "${1}" | tr -s ' ' | cut -f4 -d' ')
	   echo -en "\rCurrent status: ${STATUS}"
	done
	
	echo
	
	if [ "${STATUS}" == "error" ]; then
	   echo "Error creating clone: ${VOLNAME}"
	   exit 1
	fi
	
	echo "*** clone is now available"
	
	#get the volume id
	CLONE=$( cinder list | grep "${1}" | tr -s ' ' | cut -f2 -d' ')
	
}

function nova_create-instance {
	echo "Creating an instance: ${2}"
   	nova boot --flavor m1.tiny --image ${1} ${2}
	if [ "$?" -ne 0 ]; then
	   echo "Error creating instance: ${2}"
	   exit 1
	fi
	
   	echo "Waiting for instance '${2}'to be created"
   	STATUS="unknown"
   	while [ "${STATUS}" != "ACTIVE" ]; do
      	sleep 5
      	STATUS=$( nova list | grep "${2}" | tr -s ' ' | cut -f6 -d' ')
      	echo -en "\rCurrent status: ${STATUS}"
   	done

   	echo "*** instance is now available"

   	#get the instance id
   	INSTANCE=$( nova list | grep "${2}" | tr -s ' '  | cut -f2 -d' ')

}

function nova_attach-volume {
	echo "Attaching volume: ${2} to instance: ${1}"
	# ok, now attach the volume
   	nova volume-attach ${1} ${2} ${3}
 
	if [ "$?" -ne 0 ]; then
	   echo "Error attaching volume: ${2}"
	   exit 1
	fi
	
   	echo "Waiting for volume to become attached"

        # we'll know a volume is attached if we run 'cinder list'
        # and one line contains the VOLUMEIDID and the word "in-use"
        echo "Waiting for volume to be attached"
        STATUS="unknown"
        while [ "${STATUS}" != "in-use" -a "${STATUS}" != "error_attaching" ]; do
           sleep 5
           STATUS=$( cinder list | grep "${2}" | tr -s ' ' | cut -f4 -d' ')
           echo -en "\rCurrent status: ${STATUS}"      
        done

	if [ "${STATUS}" == "error_attaching" ]; then
	   echo "Error creating clone: ${VOLNAME}"
	   exit 1
	fi
	
   	echo "*** volume is now attached"

}

function nova_detach-volume {
	echo "Detaching volume: ${2} to instance: ${1}"
	# ok, now detach the volume
   	echo "*** detaching the volume"
   	nova volume-detach ${1} ${2}
 
	if [ "$?" -ne 0 ]; then
	   echo "Error detaching volume: ${2}"
	   exit 1
	fi   	
   	
   	
    # and wait for it to become available
    echo "Waiting for volume '${VOLNAME}' to be detached"
    STATUS="unknown"
    while [ "${STATUS}" != "available" -a "${STATUS}" != "error_detaching" ]; do
       sleep 5
       STATUS=$( cinder list | grep "${2}" | tr -s ' ' | cut -f4 -d' ')
       echo -en "\rCurrent status: ${STATUS}"       
   	done	
 
	if [ "${STATUS}" == "error_detaching" ]; then
	   echo "Error detaching volume: ${2}"
	   exit 1
	fi
	
   	echo "*** volume is now detached"

}




# main

cinder_create-volume "${VOLNAME}" "${VOLUMEIDTYPE}"


read -p "do you want to create a snapshot as well as clone the volume? [N/y] " DOSNAPCLONE
if [ "${DOSNAPCLONE}" == "y" -o "${DOSNAPCLONE}" == "Y" ]; then
	cinder_create-snapshot "${SNAPNAME}" "${VOLUME}"

    # create a clone
    cinder_create-clone  "${CLONENAME}" "${VOLUME}"
fi


read -p "do you want to create an instance and attach a the volume to it? [N/y] " ATTACH
if [ "${ATTACH}" == "y" -o "${ATTACH}" == "Y" ]; then

   # create the instance
   nova_create-instance "${IMAGE}" "${INSTNAME}"

   # ok, now attach the volume
   nova_attach-volume ${INSTANCE} ${VOLUME} ${MNT}

fi


read -p "do you want to copy an image to a volume and then copy it back as another image? [N/y] " DOIMAGE
if [ "${DOIMAGE}" == "y" -o "${DOIMAGE}" == "Y" ]; then
    echo "Copying image '${IMAGENAME}' to volume '${IMAGEVOLNAME}' ..."
    IMAGEID=$( glance image-list | grep " ${IMAGENAME} " | tr -s ' ' | cut -f2 -d' ')
    cinder create --display-name "${IMAGEVOLNAME}" --volume-type "${VOLUMEIDTYPE}" --image-id "${IMAGEID}" 1
    echo "Waiting for volume '${IMAGEVOLNAME}' to be created..."
    STATUS="unknown"
    while [ "${STATUS}" != "available" ]; do
        sleep 5
        STATUS=$( cinder list | grep "${IMAGEVOLNAME}" | tr -s ' ' | cut -f4 -d' ')
    done
    echo "*** copy image to volume done ***"

    sleep 60    # to allow vipr clean up the internal state before the same volume can be exported again

    echo "Copying volume '${IMAGEVOLNAME}' as a new image '${NEWIMAGENAME}'"
    VOLID=$( cinder list | grep "${IMAGEVOLNAME}" | tr -s ' ' | cut -f2 -d' ')
    cinder upload-to-image "${VOLID}" "${NEWIMAGENAME}"
    echo "Waiting the new image '${NEWIMAGENAME}' to be created ..."
    STATUS="unknown"
    while [ "${STATUS}" != "active" ]; do
        sleep 5
        STATUS=$( glance image-list | grep "${NEWIMAGENAME}" | tr -s ' ' | cut -f12 -d' ')
    done
    echo "*** copy volume to image done ***"
fi


read -p "Press [Enter] to continue and delete all created volumes, snapshot, image and instance"

if [ "${ATTACH}" == "y" -o "${ATTACH}" == "Y" ]; then
   # detach the volume
   nova_detach-volume ${INSTANCE} ${VOLUME}
   
   # and the instance
   echo "*** deleting the instance"
   nova delete $INSTANCE
fi

if [ "${DOIMAGE}" == "y" -o "${DOIMAGE}" == "Y" ]; then
    echo "*** deleting the image '${NEWIMAGENAME} ***"
    glance image-delete "${NEWIMAGENAME}"
    echo "Waiting for image '${NEWIMAGENAME}' to be deleted ..."
    STATUS="unknown"
    while [ "${STATUS}" != "0" ]; do
        sleep 5
        STATUS=$( glance image-list | grep "${NEWIMAGENAME}" | wc -l )
    done
    echo "*** image '${NEWIMAGENAME}' has been deleted ***"

    echo "*** deleting the volume '${IMAGEVOLNAME}' ***"
    cinder_delete-volume "${IMAGEVOLNAME}"
    
fi

if [ "${DOSNAPCLONE}" == "y" -o "${DOSNAPCLONE}" == "Y" ]; then
    # now delete the snapshot
    echo "*** deleting the snapshot"
    cinder snapshot-delete "${SNAPSHOT}"
    echo "Waiting for snapshot to be deleted"
    STATUS="unknown"
    while [ "${STATUS}" != "0" ]; do
        sleep 5
        STATUS=$( cinder snapshot-list | grep "${SNAPSHOT}" | wc -l )
    done

    # now delete the clone
    echo "***deleting the clone"
    cinder_delete-volume "${CLONE}"

fi

# now delete the volume
cinder_delete-volume "${VOLUME}"


