#!/bin/bash

# script that:
#   - creates one volume (of a predefined OpenStack volume type)
#   - optionally creates an instance and attach the volume to it
#   - optionally creates a snapshot of the volume and clones the volume
#   - optionally copies an image to a volume and then copies it back as a new image
#   - cleans up everything

DATE=`date "+%m%d%Y%H%M"`
#MNT="/dev/vdc"
MNT="auto"
VOLUMETYPE="ViPR High Performance"
NAMESUFFIX="openstack-${HOSTNAME}-${DATE}"
VOLNAME="volume-${NAMESUFFIX}"
CLONENAME="clone-${NAMESUFFIX}"
SNAPNAME="snapshot-${NAMESUFFIX}"
IMAGENAME="cirros-0.3.1-x86_64-uec"
IMAGEVOLNAME="image-volume-${NAMESUFFIX}"
NEWIMAGENAME="new-image-${NAMESUFFIX}"

INSTNAME="instance-${DATE}"
#get the nova image id
IMAGE=$( nova image-list | grep "cirros-0.3.1-x86_64-uec " | tr -s ' '| cut -f2 -d' ')

# Create the volume
cinder create --display-name "${VOLNAME}"  --volume-type "${VOLUMETYPE}" 1
cinder list

echo "Waiting for volume '${VOLNAME}' to be created"
STATUS="unknown"
while [ "${STATUS}" != "available" ]; do
   sleep 5
   STATUS=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f4 -d' ')
done

echo "*** volume is now available"

#get the volume id
VOLUME=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f2 -d' ')


read -p "do you want to create a snapshot as well as clone the volume? [N/y] " DOSNAPCLONE
if [ "${DOSNAPCLONE}" == "y" -o "${DOSNAPCLONE}" == "Y" ]; then
    # create a snapshot
    echo "Creating a snapshot"
    cinder snapshot-create --display-name "${SNAPNAME}" "${VOLUME}"
    echo "Waiting for snapshot '${SNAPNAME}' to be created"
    STATUS="unknown"
    while [ "${STATUS}" != "available" ]; do
        sleep 5
        STATUS=$( cinder snapshot-list | grep "${SNAPNAME}" | tr -s ' ' | cut -f6 -d' ')
    done
    #get the snapshot id
    SNAPSHOT=$( cinder snapshot-list | grep "${SNAPNAME}" | tr -s ' ' | cut -f2 -d' ')

    # create a clone
    echo "Creating a clone"
    cinder create --source-volid "${VOLUME}" --display-name "${CLONENAME}" 1
    echo "Waiting for clone '${CLONENAME}' to be created"
    STATUS="unknown"
    while [ "${STATUS}" != "available" ]; do
        sleep 5
        STATUS=$( cinder list | grep "${CLONENAME}" | tr -s ' ' | cut -f4 -d' ')
    done
    #get the clone id
    CLONE=$( cinder list | grep "${CLONENAME}" | tr -s ' ' | cut -f2 -d' ')
fi


read -p "do you want to create an instance and attach a the volume to it? [N/y] " ATTACH
if [ "${ATTACH}" == "y" -o "${ATTACH}" == "Y" ]; then

   echo "Creating an instance: ${INSTNAME}"
   nova boot --flavor m1.tiny --image ${IMAGE} ${INSTNAME}
   nova list

   echo "Waiting for instance '${INSTNAME}'to be created"
   STATUS="unknown"
   while [ "${STATUS}" != "ACTIVE" ]; do
      sleep 5
      STATUS=$( nova list | grep "${INSTNAME}" | tr -s ' ' | cut -f6 -d' ')
   done

   echo "*** instance is now available"

   #get the instance id
   INSTANCE=$( nova list | grep "${INSTNAME}" | tr -s ' '  | cut -f2 -d' ')

   # ok, now attach the volume
   nova volume-attach ${INSTANCE} ${VOLUME} ${MNT}

   # we'll know a volume is attached if we run 'cinder list'
   # and one line contains the VOLUMEID and the word "in-use"
   echo "Waiting for volume to be attached"
   STATUS="unknown"
   while [ "${STATUS}" != "in-use" ]; do
      sleep 5
      STATUS=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f4 -d' ')
   done
fi


read -p "do you want to copy an image to a volume and then copy it back as another image? [N/y] " DOIMAGE
if [ "${DOIMAGE}" == "y" -o "${DOIMAGE}" == "Y" ]; then
    echo "Copying image '${IMAGENAME}' to volume '${IMAGEVOLNAME}' ..."
    IMAGEID=$( glance image-list | grep " ${IMAGENAME} " | tr -s ' ' | cut -f2 -d' ')
    cinder create --display-name "${IMAGEVOLNAME}" --volume-type "${VOLUMETYPE}" --image-id "${IMAGEID}" 1
    echo "Waiting for volume '${IMAGEVOLNAME}' to be created..."
    STATUS="unknown"
    while [ "${STATUS}" != "available" ]; do
        sleep 5
        STATUS=$( cinder list | grep "${IMAGEVOLNAME}" | tr -s ' ' | cut -f4 -d' ')
    done
    echo "*** copy image to volume done ***"

    sleep 60    # to allow vipr clean up the internal state before the same volume can be exported again

    echo "Copying volume '${IMAGEVOLNAME}' as a new image '${NEWIMAGENAME}'"
    VOLID=$( cinder list | grep "${IMAGEVOLNAME}" | tr -s ' ' | cut -f2 -d' ')
    cinder upload-to-image "${VOLID}" "${NEWIMAGENAME}"
    echo "Waiting the new image '${NEWIMAGENAME}' to be created ..."
    STATUS="unknown"
    while [ "${STATUS}" != "active" ]; do
        sleep 5
        STATUS=$( glance image-list | grep "${NEWIMAGENAME}" | tr -s ' ' | cut -f12 -d' ')
    done
    echo "*** copy volume to image done ***"
fi


read -p "Press [Enter] to continue and delete all created volumes, snapshot, image and instance"

if [ "${ATTACH}" == "y" -o "${ATTACH}" == "Y" ]; then
   # detach the volume
   echo "*** detaching the volume"
   nova volume-detach ${INSTANCE} ${VOLUME}
   # and wait for it to become available
   echo "Waiting for volume '${VOLNAME}' to be detached"
   STATUS="unknown"
   while [ "${STATUS}" != "available" ]; do
      sleep 5
      STATUS=$( cinder list | grep "${VOLNAME}" | tr -s ' ' | cut -f4 -d' ')
   done
   
   # and the instance
   echo "*** deleting the instance"
   nova delete $INSTANCE
fi

if [ "${DOIMAGE}" == "y" -o "${DOIMAGE}" == "Y" ]; then
    echo "*** deleting the image '${NEWIMAGENAME} ***"
    glance image-delete "${NEWIMAGENAME}"
    echo "Waiting for image '${NEWIMAGENAME}' to be deleted ..."
    STATUS="unknown"
    while [ "${STATUS}" != "0" ]; do
        sleep 5
        STATUS=$( glance image-list | grep "${NEWIMAGENAME}" | wc -l )
    done
    echo "*** image '${NEWIMAGENAME}' has been deleted ***"

    echo "*** deleting the volume '${IMAGEVOLNAME}' ***"
    cinder delete "${IMAGEVOLNAME}"
    echo "Waiting for the volume '${IMAGEVOLNAME}' to be deleted ..."
    STATUS="unknown"
    while [ "${STATUS}" != "0" ]; do
        sleep 5
        STATUS=$( cinder list | grep "${IMAGEVOLNAME}" | wc -l )
    done
    echo "*** volume '${IMAGEVOLNAME}' has been deleted ***"
fi

if [ "${DOSNAPCLONE}" == "y" -o "${DOSNAPCLONE}" == "Y" ]; then
    # now delete the snapshot
    echo "*** deleting the snapshot"
    cinder snapshot-delete "${SNAPSHOT}"
    echo "Waiting for snapshot to be deleted"
    STATUS="unknown"
    while [ "${STATUS}" != "0" ]; do
        sleep 5
        STATUS=$( cinder snapshot-list | grep "${SNAPSHOT}" | wc -l )
    done

    # now delete the clone
    echo "***deleting the clone"
    cinder delete "${CLONE}"
    echo "Waiting for clone to be deleted"
    STATUS="unknown"
    while [ "${STATUS}" != "0" ]; do
        sleep 5
        STATUS=$( cinder list | grep "${CLONE}" | wc -l )
    done
fi

# now delete the volume
echo "*** deleting the volume"
cinder delete $VOLUME
echo "Waiting for volume to be deleted"
STATUS="unknown"
while [ "${STATUS}" != "0" ]; do
   sleep 5
   STATUS=$( cinder list | grep "${VOLUME}" | wc -l )
done

